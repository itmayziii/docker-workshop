{"componentChunkName":"component---src-templates-docs-js","path":"/containers-in-practice/1-managing-docker-containers","result":{"data":{"site":{"siteMetadata":{"title":"Docker Workshop | Tommy May III","docsLocation":""}},"mdx":{"fields":{"id":"b977e37d-783f-5e98-8083-06a879698058","title":"Managing Docker Containers","slug":"/containers-in-practice/1-managing-docker-containers"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Managing Docker Containers\",\n  \"metaTitle\": \"Managing Docker Containers\",\n  \"metaDescription\": \"Overview of commands to run/manage docker containers\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Finding an Image to Run\"), mdx(\"h2\", null, \"Registries\"), mdx(\"p\", null, \"Images are stored in something called a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/registry/\"\n  }), \"registry\"), \". Think of a registry as a place to\\nkeep your images either privately, behind authentication, or for the public to use. The main Docker registry can be found\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/\"\n  }), \"here\"), \" and this is where Docker commands will look by default when pulling an image.\"), mdx(\"p\", null, \"Take our example from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"quick-examples\"\n  }), \"quick examples\"), \" where we pull a Nginx image using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker run -dit -p 8080:80 --name my-nginx nginx:1.18.0\\n\")), mdx(\"p\", null, \"The last part of the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx:1.18.0\"), \" is saying pull an image named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx\"), \" from the default docker hub registry,\\nand make sure to pull the image tagged 1.18.0. Tags are essentially a way to version your images. Docker tags come in many\\ncommon flavors, but it really is up to the author. A common convention is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nginx:1.18.0\"), \" - Will give you a very specific version being \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1.18.0\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nginx:1.18\"), \" - Will give you the latest \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1.18.x\"), \" version whatever \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x\"), \" happens to be. This is good for people that want\\nto stay up to date with patches.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nginx:latest\"), \" - Will give you the latest Nginx version. You should really avoid these tags for production, but they can\\nbe helpful when you are just trying to test something locally, and you want the most up to date software.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nginx:1.18-alpine\"), \" - Will give you Nginx but on Alpine and not a Debian based image. Alpine is a popular distro with\\ncontainers because of how small it is.\")), mdx(\"h2\", null, \"Official Images\"), mdx(\"p\", null, \"You often want to look for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/docker-hub/official_images/\"\n  }), \"official Docker images\"), \" which are a\\ncurated set of Docker repositories hosted on Docker Hub. These official images are likely to be easy to use and have the\\nmost up to date security patches.\"), mdx(\"h1\", null, \"Creating/Running Containers\"), mdx(\"p\", null, \"Let us extend the simple Nginx example we have used a few times now.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker run -dit -p 8080:80 --name my-nginx nginx:1.18.0\\n\")), mdx(\"p\", null, \"What is the above command actually doing? Let us break it down:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"-\\n+ docker run nginx:1.18.0\\n\")), mdx(\"p\", null, \"Start a docker container based on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx:1.18.0\"), \" image.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"- docker run nginx:1.18.0\\n+ docker run -dit nginx:1.18.0\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-dit\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d = Run container in background and print container ID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"i = Keep STDIN open even if not attached. Without this you would not be able to interact with the terminal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"t = Allocate a pseudo-TTY. Without this you would not see the containers terminal output.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"- docker run -dit nginx:1.18.0\\n+ docker run -dit --name my-nginx nginx:1.18.0\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--name\"), \" names the docker container instead of the random name docker will give you.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"- docker run -dit --name my-nginx nginx:1.18.0\\n+ docker run -dit --name -p 8080:80 my-nginx nginx:1.18.0\\n\")), mdx(\"p\", null, \"Attach port 8080 on the host machine to port 80 on the container. This is what makes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080\"), \" work because\\nport 80 is what Nginx default listens to.\"), mdx(\"h2\", null, \"Docker Run vs Create+Start\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker run\"), \" is actually the combination of a few commands. You may have noticed by now that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker run\"), \" is creating and\\nstarting a docker container for us, but we can actually do these two things at separate times.\"), mdx(\"p\", null, \"Create the container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker create -it --name another-nginx nginx:1.18.0\\n\")), mdx(\"p\", null, \"Start the container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker start another-nginx\\n\")), mdx(\"h1\", null, \"Managing Running Containers\"), mdx(\"h2\", null, \"Stop a Container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker stop CONTAINER_NAME\\n\")), mdx(\"h2\", null, \"List Running Containers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker ps\\n\")), mdx(\"h3\", null, \"List All Containers (even stopped ones)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker ps -a\\n\")), mdx(\"h3\", null, \"Run a Command in a Running Container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker exec -it CONTAINER_NAME COMMAND\\ndocker exec -it another-nginx bash\\n\")), mdx(\"h3\", null, \"Delete Containers\"), mdx(\"p\", null, \"You must first stop a container before deleting it\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker stop CONTAINER_ID or CONTAINER_NAME\\ndocker stop another-nginx\\ndocker rm another-nginx\\n\")), mdx(\"p\", null, \"Alternatively you can force delete a running container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker rm -f another-nginx\\n\")), mdx(\"h3\", null, \"See Container Logs\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker logs -f CONTAINER_NAME\\ndocker logs -f another-nginx\\n\")), mdx(\"h3\", null, \"View Locally Downloaded Images\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker images\\n\")), mdx(\"h3\", null, \"Delete Local Images\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker rmi IMAGE_ID or NAME:TAG\\ndocker rmi bitnami/laravel:7-debian-10\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#finding-an-image-to-run","title":"Finding an Image to Run","items":[{"url":"#registries","title":"Registries"},{"url":"#official-images","title":"Official Images"}]},{"url":"#creatingrunning-containers","title":"Creating/Running Containers","items":[{"url":"#docker-run-vs-createstart","title":"Docker Run vs Create+Start"}]},{"url":"#managing-running-containers","title":"Managing Running Containers","items":[{"url":"#stop-a-container","title":"Stop a Container"},{"url":"#list-running-containers","title":"List Running Containers","items":[{"url":"#list-all-containers-even-stopped-ones","title":"List All Containers (even stopped ones)"},{"url":"#run-a-command-in-a-running-container","title":"Run a Command in a Running Container"},{"url":"#delete-containers","title":"Delete Containers"},{"url":"#see-container-logs","title":"See Container Logs"},{"url":"#view-locally-downloaded-images","title":"View Locally Downloaded Images"},{"url":"#delete-local-images","title":"Delete Local Images"}]}]}]},"parent":{"relativePath":"containers-in-practice/1-managing-docker-containers.md"},"frontmatter":{"metaTitle":"Managing Docker Containers","metaDescription":"Overview of commands to run/manage docker containers"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/containers-in-practice","title":"Containers in Practice"}}},{"node":{"fields":{"slug":"/quick-examples","title":"Quick Examples"}}},{"node":{"fields":{"slug":"/","title":"Docker Workshop"}}},{"node":{"fields":{"slug":"/why-containers","title":"Why Use Containers"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/containers-in-practice/1-managing-docker-containers","title":"Managing Docker Containers"}}},{"node":{"fields":{"slug":"/containers-in-practice/2-building-an-image","title":"Building an Image"}}},{"node":{"fields":{"slug":"/containers-in-practice/3-docker-compose","title":"Docker Compose"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b977e37d-783f-5e98-8083-06a879698058"}}}