{"componentChunkName":"component---src-templates-docs-js","path":"/containers-in-practice/3-docker-compose","result":{"data":{"site":{"siteMetadata":{"title":"Docker Workshop | Tommy May III","docsLocation":""}},"mdx":{"fields":{"id":"0551e7d3-44dc-5dc7-b0da-e0b2fd15df9c","title":"Docker Compose","slug":"/containers-in-practice/3-docker-compose"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker Compose\",\n  \"metaTitle\": \"Docker Compose\",\n  \"metaDescription\": \"Managing multi-container applications with Docker Compose\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What is Docker Compose\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/compose/\"\n  }), \"Docker Compose\"), \" is another tool available in the docker toolchain that specializes in managing multi-container\\nDocker applications. Think of an Application that has a web server that talks to a database container, and a caching\\ncontainer like Redis.\"), mdx(\"h2\", null, \"What I generally use Compose For\"), mdx(\"p\", null, \"Docker Compose is a great tool for running multiple containers but in practice I generally only use it for local development.\\nThis is mostly because in elevated environments I use some sort of container orchestration tool like Kubernetes. Another\\nreason why Compose is generally only useful locally is because sometimes your services are not containers at all but instead\\nmanaged services like SQL managed by GCP or AWS. You don't want to spend the money for these services on your local environment\\n, so you spin up your own \\\"close enough\\\" container to have MySQL or PostgreSQL.\"), mdx(\"h2\", null, \"Compose File Structure\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"THIS YAML IS FOR DEMONSTRATION ONLY, it will not actually run for you without the code as well.\"), \" This example is really\\njust to demonstrate what a docker-compose.yaml file generally looks like.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"version: \\\"3.5\\\"\\nservices:\\n  scms_api:\\n    container_name: scms_api_dcom\\n    image: node:10\\n    networks:\\n      - scms\\n    ports:\\n      - \\\"4000:4000\\\"\\n    environment:\\n      - SCMS_GITHUB_GATSBY_REPO=dumpsters-com\\n    depends_on:\\n      - mysql\\n      - redis\\n      - mongo\\n    volumes:\\n      - ./:/home/node/app\\n    command: \\\"npm run start\\\"\\n    working_dir: \\\"/home/node/app\\\"\\n\\n  mongo:\\n    container_name: scms_api_mongo\\n    image: mongo:3.6\\n    networks:\\n      - scms\\n    ports:\\n      - \\\"27017:27017\\\"\\n    volumes:\\n      - ./data/mongo:/data/db\\n    environment:\\n      - MONGO_INITDB_ROOT_USERNAME=admin\\n      - MONGO_INITDB_ROOT_PASSWORD=password # Don't worry about passwords here, this is for localhost only. Production will not be using these.\\n\\n  redis:\\n    container_name: scms_api_redis\\n    image: redis:3.0\\n    networks:\\n      - scms\\n    ports:\\n      - \\\"6379:6379\\\"\\n\\n  mysql:\\n    container_name: scms_api_db\\n    image: mysql:5\\n    networks:\\n      - scms\\n    ports:\\n      - \\\"8081:3306\\\"\\n    volumes:\\n      - ./data/sql:/var/lib/mysql\\n    environment:\\n      - MYSQL_ROOT_PASSWORD=password # Don't worry about passwords here, this is for localhost only. Production will not be using these.\\n      - MYSQL_USER=dev\\n      - MYSQL_PASSWORD=password\\n      - MYSQL_DATABASE=bdso\\n\\nnetworks:\\n  scms:\\n    name: scms\\n\")), mdx(\"p\", null, \"With the config above all I have to do is run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up\"), \" from inside my project, and it will start my 4 services.\\nThis is a huge time saving boost as I don't have to run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker run\"), \" commands for each one of these containers.\"), mdx(\"h2\", null, \"Managing With Docker Compose\"), mdx(\"p\", null, \"Docker Compose also makes managing all of your services very easy.\"), mdx(\"h3\", null, \"Stopping All Containers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose stop\\n\")), mdx(\"h3\", null, \"Destroying All Containers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose down\\n\")), mdx(\"h3\", null, \"Restarting All Containers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose restart\\n\")), mdx(\"h3\", null, \"Viewing All Container Logs\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose logs -f\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-is-docker-compose","title":"What is Docker Compose","items":[{"url":"#what-i-generally-use-compose-for","title":"What I generally use Compose For"},{"url":"#compose-file-structure","title":"Compose File Structure"},{"url":"#managing-with-docker-compose","title":"Managing With Docker Compose","items":[{"url":"#stopping-all-containers","title":"Stopping All Containers"},{"url":"#destroying-all-containers","title":"Destroying All Containers"},{"url":"#restarting-all-containers","title":"Restarting All Containers"},{"url":"#viewing-all-container-logs","title":"Viewing All Container Logs"}]}]}]},"parent":{"relativePath":"containers-in-practice/3-docker-compose.md"},"frontmatter":{"metaTitle":"Docker Compose","metaDescription":"Managing multi-container applications with Docker Compose"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/containers-in-practice","title":"Containers in Practice"}}},{"node":{"fields":{"slug":"/","title":"Docker Workshop"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/quick-examples","title":"Quick Examples"}}},{"node":{"fields":{"slug":"/why-containers","title":"Why Use Containers"}}},{"node":{"fields":{"slug":"/containers-in-practice/1-managing-docker-containers","title":"Managing Docker Containers"}}},{"node":{"fields":{"slug":"/containers-in-practice/3-docker-compose","title":"Docker Compose"}}},{"node":{"fields":{"slug":"/containers-in-practice/2-building-an-image","title":"Building an Image"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0551e7d3-44dc-5dc7-b0da-e0b2fd15df9c"}}}